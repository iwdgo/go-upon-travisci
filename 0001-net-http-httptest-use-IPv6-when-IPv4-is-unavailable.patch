From 8e1fa91c1e8d8a8233e29e801fdb19e09497999a Mon Sep 17 00:00:00 2001
From: Constantin Konstantinidis <constantinkonstantinidis@gmail.com>
Date: Mon, 6 Jul 2020 08:55:02 +0200
Subject: [PATCH] net/http/httptest: use IPv6 when IPv4 is unavailable

Fixes #29759

Change-Id: Idfc0abeaec7171fb62da6c04d251a347d6c9334e
---
 src/net/http/httptest/httptest.go      | 27 ++++++++++++++++++++++++++
 src/net/http/httptest/httptest_test.go |  5 ++++-
 2 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/src/net/http/httptest/httptest.go b/src/net/http/httptest/httptest.go
index f7202da92f..551d8b2344 100644
--- a/src/net/http/httptest/httptest.go
+++ b/src/net/http/httptest/httptest.go
@@ -11,6 +11,7 @@ import (
 	"crypto/tls"
 	"io"
 	"io/ioutil"
+	"net"
 	"net/http"
 	"strings"
 )
@@ -73,7 +74,11 @@ func NewRequest(method, target string, body io.Reader) *http.Request {
 	// 192.0.2.0/24 is "TEST-NET" in RFC 5737 for use solely in
 	// documentation and example source code and should not be
 	// used publicly.
+
 	req.RemoteAddr = "192.0.2.1:1234"
+	if !isIP4Available() {
+		req.RemoteAddr = "2001:DB8::1:1234" // RFC 3849 reserves 2001:DB8::/32 for IPv6
+	}
 
 	if req.Host == "" {
 		req.Host = "example.com"
@@ -89,3 +94,25 @@ func NewRequest(method, target string, body io.Reader) *http.Request {
 
 	return req
 }
+
+// isIP4Available returns true when an IPv4 address is returned by an interface
+func isIP4Available() bool {
+	interfaces, err := net.Interfaces()
+	if err != nil {
+		return false
+	}
+	var ipa net.IP
+	for i := 0; i < len(interfaces); i++ {
+		addrs, err := interfaces[i].Addrs()
+		if err != nil {
+			continue
+		}
+		for j := 0; j < len(addrs); j++ {
+			ipa = net.ParseIP(strings.Split(addrs[j].String(), "/")[0])
+			if ipa.To4() != nil {
+				return true
+			}
+		}
+	}
+	return false
+}
diff --git a/src/net/http/httptest/httptest_test.go b/src/net/http/httptest/httptest_test.go
index ef7d943837..dddfa9dad7 100644
--- a/src/net/http/httptest/httptest_test.go
+++ b/src/net/http/httptest/httptest_test.go
@@ -173,7 +173,10 @@ func TestNewRequest(t *testing.T) {
 				t.Errorf("Request.TLS mismatch:\n got: %#v\nwant: %#v", got.TLS, tt.want.TLS)
 			}
 			if !reflect.DeepEqual(got, tt.want) {
-				t.Errorf("Request mismatch:\n got: %#v\nwant: %#v", got, tt.want)
+				tt.want.RemoteAddr = "2001:DB8::1:1234"
+				if !reflect.DeepEqual(got, tt.want) {
+					t.Errorf("Request mismatch:\n got: %#v\nwant: %#v", got, tt.want)
+				}
 			}
 		})
 	}
-- 
2.22.0.windows.1

